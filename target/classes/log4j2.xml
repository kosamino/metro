<?xml version="1.0" encoding="UTF-8"?>
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出-->
<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数-->

<!--配置Log4j 2可以有四种方法(其中任何一种都可以):
    1.通过一个格式为XML或JSON的配置文件。
    2.以编程方式,通过创建一个ConfigurationFactory工厂和Configuration实现。
    3.以编程方式,通过调用api暴露在配置界面添加组件的默认配置。
    4.以编程方式,通过调用Logger内部类上的方法。

    注意,与Log4j 1.x不一样的地方,公开的Log4j 2 API没有提供任何添加、修改或删除 appender和过滤器或者操作配置文件的方法。

    Log4j能够自动配置本身在初始化期间。当Log4j启动它将定位所有的ConfigurationFactory插件和安排然后在加权从最高到最低。
    Log4j包含两个ConfigurationFactory实现,一个用于JSON和XML。加载配置文件流程如下：
        1.Log4j将检查“Log4j的配置文件“系统属性,如果设置,将尝试加载配置使用 ConfigurationFactory 匹配的文件扩展。
        2.如果没有系统属性设置JSON ConfigurationFactory log4j2-test将寻找。 json或 log4j2-test。json在类路径中。
        3.如果没有这样的文件发现XML ConfigurationFactory log4j2-test将寻找。 xml在 类路径。
        4.如果一个测试文件无法找到JSON ConfigurationFactory log4j2将寻找。 log4j2.jsn json或 在类路径中。
        5.如果一个JSON文件无法找到XML ConfigurationFactory将试图定位 log4j2。 xml在类路径中。
        6.如果没有配置文件可以找到了 DefaultConfiguration 将被使用。 这将导致日志输出到控制台。-->

<configuration status="WARN" monitorInterval="30">
    <!--变量配置-->
    <Properties>
        <!-- 格式化输出：%date表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度 %msg：日志消息，%n是换行符-->
        <!-- %logger{36} 表示 Logger 名字最长36个字符 -->
        <property name="LOG_PATTERN" value="%date{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"/>
        <!-- 定义日志存储的路径，不要配置相对路径 -->
        <property name="LOG_HOME" value="/Volumes/work/log-home"/>
    </Properties>
    <!--先定义所有的appender-->
    <appenders>

        <!--ConsoleAppender：输出结果到System.out或是System.err。
            FileAppender：输出结果到指定文件，同时可以指定输出数据的格式。append=“false”指定不追加到文件末尾
            RollingFileAppender：自动追加日志信息到文件中，直至文件达到预定的大小，=098tefp0;9lohefvbgiop[\
             xcvb。≤。-->
        <!--这个输出控制台的配置-->
        <console name="Console" target="SYSTEM_OUT">
            <!--ThresholdFilter：用来过滤指定优先级的事件。
                TimeFilter：设置start和end，来指定接收日志信息的时间区间。-->
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="trace" onMatch="ACCEPT" onMismatch="DENY"/>
            <!--输出日志的格式-->
            <PatternLayout charset="UTF-8" pattern="[%d{yyyy-MM-dd HH:mm:ss:SSS}] [%p][%t][%c][%M][%L] - %m%n"/>
        </console>

        <!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，这个也挺有用的，适合临时测试用-->
        <File name="log" fileName="${LOG_HOME}/temp_run.log" append="false">
            <PatternLayout pattern="%d{HH:mm:ss.SSS} %-5level %class{36} %L %M - %msg%xEx%n"/>
        </File>

        <!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
        <RollingFile name="RollingFileInfo" fileName="${LOG_HOME}/metro/info.log"
                     filePattern="${LOG_HOME}/metro/$${date:yyyy-MM}/info-%d{MM-dd-yyyy}-%i.log.gz">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss:SSS}] [%p] - %l - %m%n"/>
            <Policies>
                <!--interval属性用来指定多久滚动一次，默认是1 hour
                    interval中的值取决于filePatter中定义的时间格式，日期格式精确到哪一位，interval也精确到哪一个单位。
                    如本示例filePattern为%d{yyyy-MM-dd}则表示以天为单位。-->
                <TimeBasedTriggeringPolicy interval="1"/>
                <SizeBasedTriggeringPolicy size="100MB"/>
            </Policies>
        </RollingFile>

        <!-- 这个会打印出所有的warn及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
        <RollingFile name="RollingFileWarn" fileName="${LOG_HOME}/metro/warn.log"
                     filePattern="${LOG_HOME}/metro/$${date:yyyy-MM}/warn-%d{MM-dd-yyyy}-%i.log.gz">
            <ThresholdFilter level="warn" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss:SSS}] [%p] - %l - %m%n"/>
            <Policies>
                <!--interval属性用来指定多久滚动一次，默认是1 hour
                    interval中的值取决于filePatter中定义的时间格式，日期格式精确到哪一位，interval也精确到哪一个单位。
                    如本示例filePattern为%d{yyyy-MM-dd}则表示以天为单位。-->
                <TimeBasedTriggeringPolicy interval="1"/>
                <SizeBasedTriggeringPolicy size="100MB"/>
            </Policies>
        </RollingFile>

        <!-- 这个会打印出所有的error及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
        <RollingFile name="RollingFileError" fileName="${LOG_HOME}/metro/error.log"
                     filePattern="${LOG_HOME}/metro/$${date:yyyy-MM}/error-%d{MM-dd-yyyy}-%i.log.gz">
            <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss:SSS}] [%p] - %l - %m%n"/>
            <Policies>
                <!--interval属性用来指定多久滚动一次，默认是1 hour
                    interval中的值取决于filePatter中定义的时间格式，日期格式精确到哪一位，interval也精确到哪一个单位。
                    如本示例filePattern为%d{yyyy-MM-dd}则表示以天为单位。-->
                <TimeBasedTriggeringPolicy interval="1"/>
                <SizeBasedTriggeringPolicy size="100MB"/>
            </Policies>
            <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了20 -->
            <DefaultRolloverStrategy max="20"/>
        </RollingFile>
    </appenders>
    <!--然后定义logger，只有定义了logger并引入的appender，appender才会生效-->
    <loggers>
        <!--过滤掉spring和mybatis的一些无用的DEBUG信息-->
        <logger name="org.springframework" level="INFO"></logger>
        <logger name="org.mybatis" level="INFO"></logger>
        <root level="all">
            <appender-ref ref="Console"/>
            <appender-ref ref="RollingFileInfo"/>
            <appender-ref ref="RollingFileWarn"/>
            <appender-ref ref="RollingFileError"/>
        </root>
    </loggers>
    <!--host是指你将要把日志写到的目标机器，可以是ip（本地ip或远程ip，远程ip在实际项目中很常见，有专门的日志服务器来存储日志），也可以使用主机名
        如果是本地，还可以使用localhost或127.0.0.1。
        Port指定端口，默认514，参见/etc/rsyslog.conf。protocol指定传输协议，这里是UDP，facility是可选项，后面可以看到用法。-->
    <!--<Syslog name="SYSLOG" host="localhost" port="514" protocol="UDP" facility="LOCAL3"/>-->
</configuration>